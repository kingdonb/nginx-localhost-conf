# adapted / partially borrowed from
# https://www.domysee.com/blogposts/reverse-proxy-nginx-docker-compose

events {

}

http {
  error_log /etc/nginx/error_log.log warn;
  client_max_body_size 20m;

  # proxy_cache_path /etc/nginx/cache keys_zone=one:500m max_size=1000m;

  # server {
  #   server_name server1.your.domain;

  #   location /your_app_1 {
  #     proxy_pass http://your_app_1:80;
  #     rewrite ^/your_app_1(.*)$ $1 break;
  #   }

  #   location /your_app_2 {
  #     proxy_pass http://your_app_2:80;
  #     rewrite ^/your_app_2(.*)$ $1 break;
  #   }
  # }

  server {
    server_name localhost;
    # proxy_cache one;
    # proxy_cache_key $request_method$request_uri;
    # proxy_cache_min_uses 1;
    # proxy_cache_methods GET;
    # proxy_cache_valid 200 1y;

    # Note:
    # set "example-app-frontend-hostname" to "localhost" below, or use a DNS
    # entry if you prefer to forward the packets to a remote host instead.
    set $frontend example-app-frontend-hostname:3000;

    location / {
      resolver 127.0.0.11;
      proxy_pass http://$frontend;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    listen 80;
    listen 443 ssl;
    ssl_certificate /etc/letsencrypt/localhost.crt;
    ssl_certificate_key /etc/letsencrypt/localhost.key;
    # include /etc/letsencrypt/options-ssl-nginx.conf;
  }
}
